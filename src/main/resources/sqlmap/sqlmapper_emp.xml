<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- MyBatis에게 Mapper 경로를 적어야한다. -->
<mapper namespace="com.example.first_spring.mapper.EmpMapper"><!-- mapper위치 경로-->
<select id="getEmpList" resultType="EmpVO">
<!-- 쿼리의 결과값을 EmpVO로 하겠다. -->
<!-- 결과값을 위 경로에 설정한 Mapper의 메소드(id="getEmpList")로 return -->
	SELECT
	empno,
	ename,
	job,
	hiredate,
	comm
	FROM emp
	where ename = 'TURNER'
</select>
<select id="getEmp" resultType="EmpVO">
	SELECT 
	empno,
	ename,
	hiredate,
	job
	FROM 
	emp
	WHERE 
	empno = #{empNo}
	 <!-- #{empNo} : url주소에 입력된 값 -> http://localhost:8080/emp/no/7654({#empNo}) -->
</select>

<!-- 문제. job이 manager이고 sal이 2500이상받는 사원comm을 500으로 업데이트 후 사원이름,직업,커미션 조회 -->
<select id="selectEmpWhereJobAndSal" resultType="EmpVO">
select
	empno,
	ename,
	job,
	comm
from emp e 
WHERE
job = #{jobName}
AND
sal >= #{sal}

<!-- Mapper의 메소드 파라미터 @Param의 변수명과 #{}중괄호의 변수 명은 동일해야한다. -->
</select>


<!-- 문제 1. 이름에 L문자가 두 번 이상 포함된 사원 이름, 직업 조회(* L을 두번만 포함하는 사람) -->
<select id="getEmpEname" resultType="EnameVO">
SELECT
ename,
job
FROM emp e 
WHERE ename LIKE '%L%L%'
</select>
<!-- 문제 2. 커미션(comm)이 null('')인 사원의 이름, 커미션 조회 -->
<select id="getEmpComm" resultType="CommVo">
select 
ename,
comm
from emp e 
where comm = ''

</select>
<!-- 문제 3. 입사일이 '1980-12-17' ~ '1982-01-23'인 사원의 이름, 입사날짜 조회 -->
<select id="getEmpHiredate" resultType="HiredateVO">
select 
ename,
HIREDATE 
from emp e 
where HIREDATE between '1980-12-17' and '1982-01-23'
order by HIREDATE desc
</select>


<!-- 문제 0. 부서가 10, 30에 속하는 사원 중 급여가 1500을 넘는 사원의 이름 및 급여 조회 -->
<select id="getEmpDeptNo" resultType="EmpVO">
select 
ename,
SAL 
from emp e 
where (deptno = 10 or deptno = 30) and sal >= #{sal}
</select>

<!-- 문제 1. MGR이 NULL인 사원 이름, 직업, 급여 조회 -->
<select id="getMgr" resultType="EmpVO">
select 
ename,
job,
SAL 
from emp e 
where MGR is NULL
</select>

<!-- 문제 2. 특정 년도에 입사한 사원 이름, 직업, 입사날짜, 급여 조회-->
<select id="getHiredateYear" resultType="EmpVO">
select 
ename,
job,
HIREDATE ,
SAL 
from emp e 
where date_format(HIREDATE, '%Y') = #{year}
</select>

<!-- 문제 3. 입사 날짜가12월에 입사한 사원 이름, 급여 조회-->
<select id="getHiredateMonth" resultType="EmpVO">
select 
ename,
job,
hiredate ,
sal
from emp e 
where date_format(HIREDATE, '%m')=#{month} 

</select>

<!-- 문제 4. 특정 job에 속한 사원번호, 사원 이름, 입사날짜 조회 -->
<select id="getJob" resultType="EmpVO">
select 
ename,
job,
HIREDATE,
SAL 
from emp e 
where job = #{jobName}
limit 1
</select>


<!-- DB가 Oracle일때 Oracle은 MyBatis Insert할 때 PK문법이 다름(시퀀스를 추가해야 함) -->
<insert id="insertEmp">
INSERT INTO emp
(
empno,
ename,
deptno,
hiredate,
sal
) 
VALUES
(
#{empno},
#{ename},
#{deptno},
now(),
#{sal}
)
</insert>


<!-- 급여3000이상인 사람 삭제 -->
<delete id="deleteEmp">
delete from emp
where empno = #{empno}
</delete>

<select id="getEmpNoList" resultType="EmpVO">
select 
empno,
sal
from emp e 
where sal >= 3000
</select>


<update id="updateEmp">
UPDATE emp
SET 
comm = #{comm}
WHERE
empno = #{empno}
</update>

<insert id="insertDept">
INSERT INTO dept
VALUES(
#{deptno},
#{dname},
#{loc}
)
</insert>

<!--  -->
<select id="selectDeptNo" resultType="EmpVO">
SELECT 
	d.DEPTNO 
FROM 
	emp AS e
RIGHT JOIN 
	dept AS d
ON 
	e.DEPTNO = d.DEPTNO 
WHERE 
	e.EMPNO IS null
</select>


<delete id="deleteDeptno">
DELETE FROM dept
where deptno = #{deptno}
</delete>



<select id="getEmpJoinDept" resultType="EmpVO">
SELECT
emp.ename,
emp.job,
dept.loc
FROM emp left join dept
on emp.deptno = dept.deptno
</select>


<!-- A로 시작하는 사람 수 구하기 -->
<select id="selectEmpEname" resultType="EmpVO">
SELECT
*
FROM 
emp
WHERE ename LIKE CONCAT(#{search}, '%')
<!-- CONCAT 문자열 합치기 함수 -->
</select>

<!-- true가 파라미터로 들어오면 사수 있는 사원 조회
	false가 파라미터로 들어오면 사수 없는 사원 조회 -->
	<!-- MyBatis에는 Boolean형이 없기 때문에 String으로 가져와서 .equals로 true인지 false인지 작성해주어야한다. -->
<select id="selectEmpMgr" resultType="EmpVO">
SELECT
	empno,
	ename,
	mgr
FROM
	emp
WHERE 1=1
<!-- test는 if절의 조건문에 속한다, test의 작은 따옴표는 가장 바깥부분에 있어야한다. -->
	<if test='isMgr.equals("true")'>
		AND mgr IS NOT NULL
	</if>
	<if test='isMgr.equals("false")'>
		AND mgr IS NULL
	</if>
</select>
<update id="updateEmpno">
UPDATE emp
SET 
job = #{job},
sal = #{sal}
WHERE
empno = #{empno}
</update>

<!-- 문제. 사원번호가 7844번인 사원의 COMM이 0이거나 NULL이면 기존 급여에서 500을 추가
COMM이 있다면 0 리턴! -->
<select id="selectEmpCommSal" resultType="EmpVO">
select 
	empno,
	comm,
	sal
from emp e 
where empno = #{empno}
</select>

<update id="updateEmpSal">
UPDATE
	emp
SET
	sal = #{sal}
WHERE
	empno = #{empno}
</update>

<select id="selectEmpMapList" resultType="map">
SELECT
empno as 이엠피엔오,
ename as 이네임,
job as 잡,
sal as 샐,
e.deptno as 디쩜디이피티엔오,
d.dname as 디쩜디네임,
d.loc as 디쩜엘오씨
FROM emp AS e
INNER JOIN dept AS d
ON e.deptno = d.deptno
</select>



</mapper>